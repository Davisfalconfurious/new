// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;

// import java.sql.Driver;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticHub;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;




/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the
 * name of this class or
 * the package after creating this project, you must also update the
 * build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  Servo m_Servo = new Servo(9);
  private final PWMSparkMax shooter1 = new PWMSparkMax(4);
  private final PWMSparkMax shooter2 = new PWMSparkMax(5);

  private final XboxController Driver = new XboxController(0);

  //private final PWMSparkMax Frontright = new PWMSparkMax(8);
  private final PWMSparkMax Frontleft = new PWMSparkMax(2);
  //private final PWMSparkMax Rearright = new PWMSparkMax(3);
  //private final PWMSparkMax Rearleft = new PWMSparkMax(8);



  DoubleSolenoid Armsolenoid = new DoubleSolenoid(PneumaticsModuleType.REVPH, 0, 0);
  boolean solenoidOpen = false;
  Timer timer1;

  double limit= 90;


  /**
   * This function is run when the robot is first started up and should be used
   * for any
   * initialization code.
   */
  @Override
  public void robotInit() {
  
    

    
  }

  @Override
  public void robotPeriodic() {
  }

  @Override
  public void autonomousInit() {
  }

  @Override
  public void autonomousPeriodic() {
  }

  @Override
  public void teleopInit() {
  }

  @Override
  public void teleopPeriodic() {

    Frontleft.set(Driver.getLeftY()*limit);
    //Rearleft.set(-Driver.getLeftY()*limit);
    //Frontright.set(Driver.getLeftY()*limit);
    //Rearright.set(-Driver.getLeftY()*limit);
    
      if (Driver.getYButton()){
      m_Servo.setPosition(.2);
      } else {
      m_Servo.setPosition(1);
      }
     
    {
      //Am not sure but the button to spin shooter is B
      if(Driver.getXButtonReleased()){
        shooter1.set(-.90);
        shooter2.set(-.90);
      //Same problem its A to stop the shooter  
      } else if (Driver.getBButton()){
        shooter1.set(0);
        shooter2.set(0);
      //Side note make sure you turn off the shooter when you disable
      
      //Pnematic program
      if(Driver.getRightBumper()){
        solenoidOpen = !solenoidOpen;

      }
      if(solenoidOpen){
        Armsolenoid.set(Value.kForward);
      }else if (Driver.getAButton()){
        Armsolenoid.set(Value.kReverse);
      }
    }
    

      


        
        
      }
    }
  

  @Override
  public void disabledInit() {
  }

  @Override
  public void disabledPeriodic() {
  }

  @Override
  public void testInit() {
  }

  @Override
  public void testPeriodic() {
  }

  @Override
  public void simulationInit() {
  }

  @Override
  public void simulationPeriodic() {
  }
}
